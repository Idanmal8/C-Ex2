
#include <stdio.h>
#include <string.h>

void addBigNumbers (char first[], char second[], char result[]);
void sortBigNumbers(char* bigNumbers[] , int N);

int
main ()
{
 
}
// this method is summing two char arrays into one array (mathematical)
void addBigNumbers (char first[], char second[], char result[])
{
    int reminder = 0;
    int lengthOfFirst = strlen (first);
    int lengthOfSecond = strlen (second);
    int carry = 0;
    int temp = 0;
    int trueForLengthCheck = 0;
    int biggestSize = lengthOfFirst;
    if (lengthOfFirst > lengthOfSecond)//all this conditions checks what is the biggest size .
    {
        biggestSize = lengthOfFirst;
    }
    else if (lengthOfSecond > lengthOfFirst)
    {
        trueForLengthCheck = 1;
        biggestSize = lengthOfSecond;
    }
    if (lengthOfFirst == 1 && lengthOfSecond == 1)
    {
        trueForLengthCheck = 3;
        biggestSize = 2;
        temp = 1;
    }else if(lengthOfSecond == lengthOfFirst){
        temp = 0;
    }else{
        temp = biggestSize;
    }
    //this for loop is going over the array and summing the chars .
    for (int i = biggestSize - 1; i > -1; i--) {
        if (trueForLengthCheck == 3 && first[i - 1] == '0' &&
            second[i - 1] == '0')// checks if the only number u inputted is 0 and 0 .
        {
            result[0] = '0';
            break;
        }
        while (temp > 0)// moving the indexes as it should be with the lengths of the arrays .
        {
             if (trueForLengthCheck == 3)
            {
                first[temp] = first[temp - 1];
                first[temp - 1] = '0';
                second[temp] = second[temp - 1];
                second[temp - 1] = '0';
                temp --;

            }
            else if (trueForLengthCheck == 1 && lengthOfFirst > 0)
            {
                first[temp - 1] = first[lengthOfFirst - 1];
                first[lengthOfFirst - 1] = '0';
                lengthOfSecond--;
                lengthOfFirst--;
                temp--;
            }
            else if (trueForLengthCheck == 0 && lengthOfSecond > 0)
            {
                second[temp - 1] = second[lengthOfSecond - 1];
                second[lengthOfSecond - 1] = '0';
                lengthOfSecond--;
                lengthOfFirst--;
                temp--;

            }
            else if (trueForLengthCheck == 1)
            {
                first[temp - 1] = '0';
                temp--;
            }
            else
            {
                second[temp - 1] = '0';
                temp--;
            }
        }
        result[biggestSize] = '\0';
        double result1 = (first[i] - '0') + (second[i] - '0');
        if (first[i] < '0' || first[i] > '9')// two conditions checks if it is not a number character.
        {
            carry = 0;
            strcpy (result, "error");
            break;
        }
        if (second[i] < '0' || second[i] > '9')
        {
            carry = 0;
            strcpy (result, "error");
            break;

        }
        if ((result1 / 10) >= 1 && trueForLengthCheck == 0)
        {
            reminder = ((first[i] - '0') + (second[i] - '0')) % 10;
            result[i] = reminder + 48;
            carry = 1;
            second[i - 1] += 1;
        }else if ((result1 / 10) >= 1 && trueForLengthCheck == 1 || (result1 / 10) >= 1 && trueForLengthCheck == 3){
            reminder = ((first[i] - '0') + (second[i] - '0')) % 10;
            result[i] = reminder + 48;
            carry = 1;
            first[i - 1] += 1;
        }
        else
        {
            carry = 0;
            result[i] = result1 + 48;
        }

    }
    if(carry == 1){
        result[biggestSize] =  '0';
        result[biggestSize + 1] = '\0';
        result[0] = '1';

    }

}
//this method is sorting the pointers as the length of the arrays from long to short.
void sortBigNumbers(char* bigNumbers[] , int N){
    int i = 0;
    int j = 0;
    char *save;
   for(i = 0 ; i < N ; i++){
       for (j = i+1 ; j < N ; j++){
           if(strlen(bigNumbers[i]) > strlen(bigNumbers[j])){
               save = bigNumbers[i];
               bigNumbers[i] = bigNumbers[j];
               bigNumbers[j] = save;

           }


       }
   }

}


